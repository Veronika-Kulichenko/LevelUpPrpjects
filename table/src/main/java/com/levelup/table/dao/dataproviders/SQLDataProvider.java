package com.levelup.table.dao.dataproviders;

import com.levelup.table.dao.DataProvider;

import java.sql.*;

/**
 * @author Veronika Kulichenko on 07.08.16.
 */
public class SQLDataProvider implements DataProvider {

    private final String url;
    private final String user;
    private final String pass;
    private final String driver;

    private volatile Statement statement = null;
    protected volatile Connection connection;

    public SQLDataProvider(String url, String user, String pass, String driver) {
        this.url = url;
        this.user = user;
        this.pass = pass;
        this.driver = driver;
    }

    @Override
    public void openConnection() {
        getConnection();
    }

    @Override
    public void closeConnection() {
        try {
            if (connection != null) {
                if (statement != null && !statement.isClosed()) {
                    ResultSet resultSet = statement.getResultSet();
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    statement.close();
                }

                connection.close();
                connection = null;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private Connection getConnection() {
        if (connection != null) {
            return connection;
        }
        synchronized (this) {
            try {
                Class.forName(driver).newInstance();
            } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
                e.printStackTrace();
            }
            try {
                connection = DriverManager.getConnection(url, user, pass);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return connection;
    }

    public Statement getStatement() {
        try {
            statement = getConnection().createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return statement;
    }

    public PreparedStatement getPreparedStatement(String query) {
        try {
            statement = getConnection().prepareStatement(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (PreparedStatement) statement;
    }

    public PreparedStatement getPreparedStatement(String query, int autoGeneratedKeys) {
        try {
            statement = getConnection().prepareStatement(query, autoGeneratedKeys);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (PreparedStatement) statement;
    }


}
